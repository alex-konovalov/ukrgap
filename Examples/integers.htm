<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                                    
  <meta http-equiv="Content-Type" content="text/html; charset=koi8-r">
                                    
  <meta name="Author" content="Alexander Konovalov">
                                    
  <meta name="GENERATOR"
 content="Mozilla/4.76 [en]C-CCK-MCD (ITware edition)  (Win95; U) [Netscape]">
  <title>Система компьютерной алгебры GAP - учебные примеры</title>
</head>
  <body>
         <i><font face="Arial,Helvetica"><font size="-1"><a
 href="Examples.htm">Вернуться  к списку примеров</a> </font></font></i>
        
<center>         
<hr width="100%"></center>
  <i><font face="Arial,Helvetica"><font size="-1"><br>
   </font></font></i>  
<div align="center"><big><b>Целые числа, алгоритм Евклида и разложение на
 множители</b></big></div>
   
<div align="center"><i><small>(по материалам дипломной работы Жатько Н.В., 
2003 г.)</small></i><br>
  </div>
  <br>
   
<div align="center"><b>Некоторые функции для работы с целыми числами</b><br>
  </div>
  <br>
  Функция <tt><b>IsInt(obj)</b></tt> возвращает <b><tt>true </tt></b>или
<b><tt>false  </tt></b>в зависимости от того, является ли <tt><b>obj </b></tt>целым
числом,  или нет. Аналогично, <tt><b>IsPosInt(obj)</b></tt> проверяет, является
ли  <tt><b>obj </b></tt>целым положительным числом. Функция <tt><b>Int(elm)</b></tt>
 возвращает целое число <tt><b>int</b></tt>, чье значение зависит от типа
входного параметра <b><tt>elm</tt></b>. Если <b><tt>elm</tt></b> &#8211; рациональное
число, то <b><tt>int</tt></b> &#8211; его целая часть. Если <tt><b>elm</b></tt>
&#8211; элемент конечного поля простой характеристики, то <tt><b>int </b></tt>&#8211;
наименьшее неотрицательное число, такое что <tt><b>elm = int * One(elm)</b></tt>.
Если <b><tt>elm</tt></b> &#8211; строка, состоящая из цифр 0, 1, ..., 9 и, возможно,
 знака "минус" в первой позиции, то <tt><b>int</b></tt> &#8211; описываемое этой
 строкой целое число, например:<br>
   
<blockquote><tt><b>gap&gt; Int(4/3); Int(-2/3);<br>
  1<br>
  0<br>
  gap&gt; int:= Int(Z(5));  int * One(Z(5));<br>
  2<br>
  Z(5)<br>
  gap&gt; Int("12345");  Int("-27");  Int("-27/3");<br>
  12345<br>
  -27<br>
  fail</b></tt><br>
  </blockquote>
  Функция <b><tt>IsEvenInt(n)</tt></b> проверяет, является ли число четным.
 Аналогично, функция <tt><b>IsOddInt(n)</b></tt> проверяет, является ли число
 нечетным. Функция <tt><b>AbsInt(n)</b></tt> возвращает модуль целого числа
 <tt><b>n</b></tt>:<br>
   
<blockquote><tt><b>gap&gt; AbsInt(33);<br>
  33<br>
  gap&gt; AbsInt(-214378);<br>
  214378<br>
  gap&gt; AbsInt(0);<br>
  0</b></tt><br>
  </blockquote>
  Функция <tt><b>SignInt(n)</b></tt> возвращает знак числа <b>n</b>.<br>
   
<blockquote><tt><b>gap&gt; SignInt(33);<br>
  1<br>
  gap&gt; SignInt(-214378);<br>
  -1<br>
  gap&gt; SignInt(0);<br>
  0</b></tt><br>
  </blockquote>
  Функция <tt><b>LogInt(n, base)</b></tt> возвращает целую часть логарифма
 положительного целого числа <tt><b>n</b></tt> по положительному целому основанию
 <tt><b>base</b></tt>. Если <tt><b>n</b></tt> или <b><tt>base </tt></b>не
положительны, будет получено сообщение об ошибке.<br>
   
<blockquote><b><tt>gap&gt; LogInt(1030, 2);<br>
  10        # так как 2^10 = 1024<br>
  gap&gt; LogInt(1, 10);<br>
  0</tt></b><br>
  </blockquote>
  Функции <tt><b>RootInt(n)</b></tt> и <tt><b>RootInt(n, k)</b></tt> возвращают
 целую часть корня <b><tt>k</tt></b>-й степени из целого числа <tt><b>n</b></tt>.
 Если <tt><b>k</b></tt> не задано, то вычисляется квадратный корень. Если
<tt><b>n</b></tt> положительно, то <b><tt>RootInt</tt></b> возвращает наибольшее
положительное целое <tt><b>r</b></tt>, такое что <b><tt>r/k</tt></b> меньше
или равняется <tt><b>n</b></tt>. Если <tt>n</tt> отрицательно и <b><tt>k</tt></b>
нечетно, то <tt><b>RootInt </b></tt>возвращает  <tt><b>-RootInt(-n,k)</b></tt>.
Если <b><tt>n</tt></b> отрицательно и <b><tt>k</tt></b> четно, то возвращается
 сообщение об ошибке. Оно также будет выдано, если <tt><b>k </b></tt>равно
 нулю или отрицательно.<br>
   
<blockquote><tt><b>gap&gt; RootInt(361);<br>
  19<br>
  gap&gt; RootInt(2 * 10^12);<br>
  1414213<br>
  gap&gt; RootInt(17000, 5);<br>
  7    # так как 7^5 = 16807</b></tt><br>
  </blockquote>
  Функция <tt><b>SmallestRootInt(n)</b></tt> возвращает наименьший корень 
из целого числа <tt><b>n</b></tt>, т.е. минимальное по модулю целое число 
<tt><b>r</b></tt>, для которого существует положительное число <tt><b>k</b></tt>, 
такое что <tt><b>n = r^k</b></tt>. <br>
   
<blockquote><tt><b>gap&gt; SmallestRootInt(2^30);<br>
  2<br>
  gap&gt; SmallestRootInt(-(2^30));<br>
  -4   # так как (-2)^30 = 2^30<br>
  gap&gt; SmallestRootInt(279936);<br>
  6<br>
  gap&gt; LogInt(279936, 6);<br>
  7<br>
  gap&gt; SmallestRootInt(1001);<br>
  1001</b></tt><br>
  </blockquote>
  Функция <tt><b>Random(Integers)</b></tt> возвращает псевдослучайное целое
 число в диапазоне от -10 до 10. Если необходимы случайные числа из другого
 интервала, используется функция <tt><b>Random([low .. high])</b></tt>.<br>
  <br>
  <br>
   
<div align="center"><b>Алгоритм Евклида<br>
  </b></div>
  <br>
  Вначале заметим, что в GAP имеются стандартные функции <tt><b>Gcd </b></tt>и
 <tt><b>Gcdex </b></tt>для нахождения наибольшего общего делителя, а также
 линейного представления НОД и нуля:<br>
   
<blockquote><tt><b>gap&gt; Gcd(100, 48);<br>
  4<br>
  gap&gt; Gcdex(100, 48);<br>
  rec( gcd := 4, coeff1 := 1, coeff2 := -2, coeff3 := -12, coeff4 := 25 )<br>
  gap&gt; 100*1+48*-2;<br>
  4<br>
  gap&gt; 100*-12+48*25;<br>
  0</b></tt></blockquote>
  Однако, использование этих функций выводит на экран только конечный результат.
 Поэтому покажем, как, например, разработать программу, с помощью которой
мы сможем получить информацию о каждом этапе алгоритма Евклида. <br>
  <br>
  Вначале разработаем функцию для вычисления неполного частного от деления
 <i>a</i> на <i>b</i>, которая будет находить остаток от деления <i>a</i>
на <i>b</i>, вычитать его из <i>a</i>, а затем делить полученное число на
<i>b</i> (заметим, что стандартная функция системы <tt><b>QuoInt </b></tt>возвращает
 неполное частное при делении модуля <i>a</i> на модуль <i>b</i> со знаком,
 равным произведению знаков <i>a</i> и <i>b</i>, так что <tt><b>QuoInt(-5,3)
 = -1</b></tt>, тогда как <b><tt>quotient(-5,3) = -2)</tt></b>:<br>
   
<blockquote><tt><b>quotient:=function(a,b)<br>
  local r, m, q;<br>
  # a = b * q + r<br>
  r:= a mod b; # остаток от деления<br>
  m:= a - r;   # m = b * q <br>
  q:=m/b;    <br>
  return q;<br>
  end;</b></tt><br>
  </blockquote>
  Пример работы с данной функцией:<br>
   
<blockquote><tt><b>gap&gt; quotient(18,3);<br>
  6<br>
  gap&gt; quotient(27,8);<br>
  3<br>
  gap&gt; quotient(2^100-1,2^100+1);<br>
  0<br>
  gap&gt; quotient(2^100+1,2^100-1);<br>
  1</b></tt></blockquote>
  Теперь реализуем алгоритм Евклида. Строго говоря, предыдущая функция не 
является необходимой для него, так как на каждом шаге нас будет интересовать 
только остаток:<br>
   
<blockquote><tt><b>euclid:=function(a,b)<br>
  local r;<br>
  r:=a mod b;<br>
  while r &lt;&gt; 0 do<br>
    a:=b;<br>
    b:=r;<br>
    r:=a mod b;<br>
  od;<br>
  return b;<br>
  end;</b></tt><br>
  </blockquote>
  Пример вычисления НОД с помощью данной функции:<br>
   
<blockquote><tt><b>gap&gt; euclid(21,9);<br>
  3<br>
  gap&gt; euclid(7,9);<br>
  1<br>
  gap&gt; euclid(2^100-1,2^100+1);<br>
  1<br>
  gap&gt; euclid(6456,46);<br>
  2<br>
    </b></tt></blockquote>
  Однако, для того, чтобы поэтапно вывести на печать алгоритм Евклида, нам
 все же понадобится дополнительное обращение к разработанной ранее функции
 <tt><b>quotient</b></tt>. Для этого модифицируем функцию <tt><b>euclid </b></tt>следующим
 образом:<br>
   
<blockquote><tt><b>euclidPrint:=function(a,b)<br>
  local r,q;<br>
  r:=a mod b;<br>
  q:=quotient(a,b);<br>
  Print(a, " = ", b, " * ", q, " + ", r, "\n");<br>
  while r &lt;&gt; 0 do<br>
    a:=b;<br>
    b:=r;<br>
    r:=a mod b;<br>
    q:=quotient(a,b);<br>
  Print(a, " = ", b, " * ", q, " + ", r, "\n");<br>
  od;<br>
  Print("NOD = ", b, "\n");<br>
  return b;<br>
  end;</b></tt><br>
  </blockquote>
  Теперь алгоритм Евклида будет выводиться на печать:<br>
   
<blockquote><b><tt>gap&gt; euclidPrint(300,85);<br>
  300 = 85 * 3 + 45<br>
  85 = 45 * 1 + 40<br>
  45 = 40 * 1 + 5<br>
  40 = 5 * 8 + 0<br>
  NOD = 5<br>
  5<br>
    </tt></b></blockquote>
   
<blockquote><b><tt>gap&gt; euclidPrint(4564300,6545685);<br>
  4564300 = 6545685 * 0 + 4564300<br>
  6545685 = 4564300 * 1 + 1981385<br>
  4564300 = 1981385 * 2 + 601530<br>
  1981385 = 601530 * 3 + 176795<br>
  601530 = 176795 * 3 + 71145<br>
  176795 = 71145 * 2 + 34505<br>
  71145 = 34505 * 2 + 2135<br>
  34505 = 2135 * 16 + 345<br>
  2135 = 345 * 6 + 65<br>
  345 = 65 * 5 + 20<br>
  65 = 20 * 3 + 5<br>
  20 = 5 * 4 + 0<br>
  NOD = 5<br>
  5</tt></b><br>
  </blockquote>
  <br>
   
<div align="center"><b>Простые числа и разложение на множители</b><br>
  </div>
  <br>
  С помощью функции <tt><b>Primes </b></tt>может быть получен список всех 
простых чисел, не превышающих 1000:<br>
   
<blockquote><tt><b>gap&gt; Primes;<br>
  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,
 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,
 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,
 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,
 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601,
 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,
 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,
 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,
 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]</b><br>
    </tt></blockquote>
  Он содержит 168 чисел:<br>
   
<blockquote><b>gap&gt; Length(last);<br>
  168</b><br>
  </blockquote>
  Так как <tt><b>Primes </b></tt>&#8211; это список, то мы можем, например, получить
 20-е простое число следующим образом:<br>
   
<blockquote><tt><b>gap&gt; Primes[20];<br>
  71</b></tt><br>
  </blockquote>
  Для того, чтобы проверить, является ли число простым, используется функция
 <tt><b>IsPrimeInt </b></tt>(этот же результат можно получить и с помощью
более общей функции <tt><b>IsPrime</b></tt>, которая применима не только
к целым числам, но и к элементам Евклидовых колец):<br>
   
<blockquote><tt><b>gap&gt; IsPrimeInt(657867897897897897891);<br>
  false<br>
  gap&gt; 2^31-1;<br>
  2147483647<br>
  gap&gt; IsPrimeInt(2^31-1);<br>
  true<br>
  gap&gt; IsPrimeInt(2^256-1);<br>
  false</b></tt><br>
  </blockquote>
  0 и 1 не являются простыми числами, и GAP "знает" это:<br>
   
<blockquote><tt><b>gap&gt; IsPrimeInt(0);<br>
  false<br>
  gap&gt; IsPrimeInt(1);<br>
  false<br>
    </b></tt></blockquote>
  Здесь и далее функции могут работать и с отрицательными числами:<br>
   
<blockquote><b><tt>gap&gt; IsPrimeInt(-7);<br>
  true<br>
  gap&gt; IsPrimeInt(-10);<br>
  false</tt></b><br>
  </blockquote>
  Для чисел, больших чем 10<sup>13</sup>, используемый алгоритм проверки
простоты  числа может выдавать подобное предупреждение:<br>
   
<blockquote><tt><b>gap&gt; a:=657867897897321867697897897891;<br>
  657867897897321867697897897891<br>
  gap&gt; IsPrimeInt(a);<br>
  #I beyond the guaranteed bound of the probabilistic primality test<br>
  true</b></tt><br>
  </blockquote>
  Однако до сих пор неизвестны составные числа, большие чем 10<sup>13</sup>,
 которые этим тестом определяются как простые. Вывод этого предупреждения
можно отключить, если использовать функцию <b>IsProbablyPrimeInt</b>:<br>
   
<blockquote><tt><b>gap&gt; IsProbablyPrimeInt(a);<br>
  true</b></tt><br>
  </blockquote>
  Функция <tt><b>IsPrimePowerInt </b></tt>определяет, является ли число степенью
 простого числа:<br>
   
<blockquote><tt><b>gap&gt; IsPrimePowerInt(1000);<br>
  false<br>
  gap&gt; IsPrimePowerInt(2^31);<br>
  true<br>
  gap&gt; IsPrimePowerInt(2^31-1);<br>
  true </b></tt><br>
  </blockquote>
  Заметим, что 2<sup>31</sup>-1 &#8211; простое число (см. выше), что и объясняет
 последний результат.<br>
  <br>
  Функции <tt><b>NextPrimeInt </b></tt>и <b><tt>PrevPrimeInt </tt></b>возвращают
 соответственно минимальное простое число, которое больше заданного, и максимальное
 простое число, которое меньше заданного.<br>
   
<blockquote><tt><b>gap&gt; NextPrimeInt(2^32);<br>
  4294967311<br>
  gap&gt; PrevPrimeInt(2^32);<br>
  4294967291<br>
  gap&gt; NextPrimeInt(2^32)-2^32;<br>
  15<br>
  gap&gt; 2^32-PrevPrimeInt(2^32);<br>
  5</b></tt><br>
  </blockquote>
  Для разложения на множители используется функция <tt><b>FactorsInt </b></tt>(этот
 же результат можно получить и с помощью более общей функции <b><tt>Factors</tt></b>,
 которая применима не только к целым числам, но и к элементам Евклидовых
колец):<br>
   
<blockquote><tt><b>gap&gt; FactorsInt(2^64-1);<br>
  [3, 5, 17, 257, 641, 65537, 6700417]<br>
  gap&gt; FactorsInt(2^128-1);<br>
  [3, 5, 17, 257, 641, 65537, 274177, 6700417, 67280421310721]<br>
  gap&gt; FactorsInt(2^200-1);<br>
  [3, 5, 5, 5, 11, 17, 31, 41, 101, 251, 401, 601, 1801, 4051, 8101, 61681,
 268501, 340801, 2787601, 3173389601]</b></tt><br>
  </blockquote>
  К этому разложению можно применить функцию <tt><b>Collected </b></tt>для
его сокращения:<br>
   
<blockquote><tt><b>gap&gt; a:=2^20*3^15*5^7;<br>
  1175462461440000000<br>
  gap&gt; FactorsInt(a);<br>
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5]<br>
  gap&gt; Collected(FactorsInt(a));<br>
  [[2, 20], [3, 15], [5, 7]]</b></tt><br>
  </blockquote>
  Можно использовать и функцию <tt><b>PrimePowersInt </b></tt>для представления
 этого списка в другом виде:<br>
   
<blockquote><tt><b>gap&gt; PrimePowersInt(a);<br>
  [2, 20, 3, 15, 5, 7]</b></tt><br>
  </blockquote>
  Для вывода на печать канонического разложения составного числа на множители
 используется функция <tt><b>PrintFactorsInt:</b></tt><br>
   
<blockquote><tt><b>gap&gt; PrintFactorsInt(a);<br>
  2^20*3^15*5^7<br>
  gap&gt; PrintFactorsInt(Factorial(20));<br>
  2^18*3^8*5^4*7^2*11*13*17*19</b></tt><br>
  </blockquote>
  Функция <tt><b>DivisorsInt </b></tt>возвращает список всех положительных
 делителей целого числа:<br>
   
<blockquote><tt><b>gap&gt; DivisorsInt(100);<br>
  [1, 2, 4, 5, 10, 20, 25, 50, 100]</b></tt><br>
  </blockquote>
  Функции <tt><b>Sigma </b></tt>и <b><tt>Tau </tt></b>вычисляют соответственно
 сумму и число всех положительных делителей целого числа:<br>
   
<blockquote><tt><b>gap&gt; Sigma(100);<br>
  217<br>
  gap&gt; Tau(100);<br>
  9<br>
  gap&gt; Length(DivisorsInt(100))=Tau(100);<br>
  true<br>
  gap&gt; Sum(DivisorsInt(100))=Sigma(100);<br>
  true</b></tt></blockquote>
     
<hr width="100%" size="2"><i><font face="Arial,Helvetica"><font
 size="-1"><a href="Examples.htm"><br>
   Вернуться   к списку примеров</a></font></font></i> <br>
  <br>
 <br>
</body>
</html>
