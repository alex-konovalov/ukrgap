<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                                                    
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
                                                    
  <meta name="Author" content="Alexander Konovalov">
                                                    
  <meta name="GENERATOR"
 content="Mozilla/4.76 [en]C-CCK-MCD (ITware edition)  (Win95; U) [Netscape]">
  <title>Система компьютерной алгебры GAP - учебные примеры</title>
</head>
  <body>
             <i><font face="Arial,Helvetica"><font size="-1"><a
 href="Examples.htm">Вернуться  к списку примеров</a> </font></font></i>
            
<center>             
<hr width="100%"></center>
      <i><font face="Arial,Helvetica"><font size="-1"><br>
       </font></font></i>      
<div align="center"><big><b>Бинарные операции. Полугруппы и моноиды.</b></big></div>
           <br>
 
<div align="justify">В системе GAP одним из способов задания бинарной операции 
на конечном множестве M является задание ее с помощью таблицы. При этом бинарная 
операция полагается мультипликативной. Таблица умножения является квадратной 
матрицей с натуральными коэффициентами, в которой <i>a<sub>ij</sub></i> =
<i>k</i>, если произведение <i>i</i>-го элемента множества M на его <i>j</i>-й
элемент равняется его <i>k</i>-му элементу (заметьте, что задание таблицы 
умножения попутно вводит отношение порядка на множестве М).<br>
 <br>
Полученная структура будет являться <b><i>группоидом</i></b> в соответствии
с [Общая алгебра. Т.2 / В.А.Артамонов, В.Н.Салий, Л.А.Скорняков и др. Под
общ. ред. Л.А.Скорнякова. - М.:Наука, 1991]. В системе GAP такая структура 
называется  <i><b>магмой</b></i> (magma) в соответствии с [N. Bourbaki. &#201;l&#233;ments
de Math&#233;matique, Alg&#232;bre I, volume 1. Hermann, Paris, 1970].<br>
 </div>
 <br>
<div align="justify"> Зададим некоторую таблицу умножения и исследуем свойства
бинарной операции, которая ей соответствует. Вначале введем матрицу m:</div>
<blockquote><tt><b> gap&gt; m:=[[1,1,1,1],[1,2,3,4],[1,3,2,4],[1,4,4,3]];</b><br>
  <b> [ [ 1, 1, 1, 1 ], [ 1, 2, 3, 4 ], [ 1, 3, 2, 4 ], [ 1, 4, 4, 3 ] ]</b><br>
  </tt></blockquote>
 Чтобы вывести ее на экран в удобочитаемом виде, применим функцию <tt><b>Display</b></tt>:
<blockquote><tt><b> gap&gt; Display(m);<br>
 [ [  1,  1,  1,  1 ],<br>
   [  1,  2,  3,  4 ],<br>
   [  1,  3,  2,  4 ],<br>
   [  1,  4,  4,  3 ] ]</b><br>
  </tt></blockquote>
 Теперь мы можем сконструировать группоид <tt><b>M</b></tt> с помощью функции
<tt><b>MagmaByMultiplicationTable</b></tt> следующим образом:
<blockquote><tt><b> gap&gt; M:=MagmaByMultiplicationTable(m);</b><br>
  <b> &lt;magma with 4 generators&gt;</b><br>
  </tt></blockquote>
 Убедимся, что он состоит из четырех элементов:
<blockquote><tt><b> gap&gt; AsList(M);</b></tt><br>
  <tt><b> [ m1, m2, m3, m4 ]</b></tt><br>
</blockquote>
 
<div align="justify">Легко заметить, что введенная таблица умножения была
симметрична относительно главной диагонали, и поэтому группоид <tt><b>M</b></tt>
должен быть коммутативен. GAP также может проверить это:</div>
<blockquote><tt><b> gap&gt; IsCommutative(M);</b></tt><br>
  <tt><b> true</b></tt><br>
</blockquote>
 
<div align="justify">Немного сложнее с первого взгляда заметить, почему групоид
M не является ассоциативным. Однако это на самом деле так:</div>
<blockquote><tt><b> gap&gt; IsAssociative(M);</b></tt><br>
  <tt><b> false</b></tt><br>
</blockquote>
 
<div align="justify">Чтобы выяснить, почему ассоциативность не имеет места,
найдем все тройки элементов группоида <tt><b>M</b></tt>, для которых не выполняется
условие ассоциативности. Сначала сформируем список всевозможных упорядоченных
наборов по три элемента из <tt><b>M</b></tt> (заметьте, что двойная точка
с запятой в конце команды подавляет вывод на экран результата, который в
данном случае занял бы очень много места):</div>
<blockquote><tt><b> gap&gt; t:=Tuples(AsList(M),3);;</b></tt><br>
</blockquote>
 
<div align="justify">Теперь выберем из этого списка с помощью функции <tt><b>Filtered</b></tt>
только те тройки, для которых условие ассоциативности не выполняется. Таких
троек окажется две:</div>
<blockquote><tt><b> gap&gt; f:=Filtered(t, x -&gt; (x[1]*x[2])*x[3] &lt;&gt;
x[1]*(x[2]*x[3]));</b><br>
  <b> [ [ m3, m4, m4 ], [ m4, m4, m3 ] ]</b><br>
  </tt></blockquote>
 
<div align="justify">Проверим теперь условие асоциативности непосредственно
для первой из троек. Действительно, в одном случае мы получаем <tt><b>m3</b></tt>,
тогда как другой вариант расстановки скобок дает в результате <b><tt>m2</tt></b>:</div>
<blockquote><b><tt> gap&gt; x:=f[1];</tt><br>
  <tt> [ m3, m4, m4 ]</tt><br>
  <tt> gap&gt; (x[1]*x[2])*x[3]; x[1]*(x[2]*x[3]);</tt><br>
  <tt> m3</tt><br>
  <tt> m2</tt></b><br>
</blockquote>
 Полезными являются функции для определения нейтрального элемента и нулевого 
элемента групоида <tt><b>M</b></tt>:
<blockquote><tt><b> gap&gt; MultiplicativeNeutralElement(M);</b></tt><br>
  <tt><b> m2</b></tt><br>
  <tt><b> gap&gt; MultiplicativeZero(M);</b></tt><br>
  <tt><b> m1</b></tt><br>
</blockquote>
 Рассмотрим теперь еще один подобный пример, в котором операция уже будет
являться ассоциативной:
<blockquote><tt><b>gap&gt; m:=[[1,1,1,1],[1,2,3,4],[1,3,4,2],[1,4,2,3]];</b><br>
  <b> [ [ 1, 1, 1, 1 ], [ 1, 2, 3, 4 ], [ 1, 3, 4, 2 ], [ 1, 4, 2, 3 ] ]</b><br>
  <b> gap&gt; M:=MagmaByMultiplicationTable(m);</b><br>
  <b> &lt;magma with 4 generators&gt;</b><br>
  <b> gap&gt; IsAssociative(M);</b><br>
  <b> true</b><br>
  <b> gap&gt; IsCommutative(M);</b><br>
  <b> true</b><br>
  <b> gap&gt; MultiplicativeNeutralElement(M);</b><br>
  <b> m2</b></tt><br>
</blockquote>
<div align="justify">Таким образом, мы построили группоид с ассоциативной
бинарной операцией и нейтральным элементом относительно этой операции. Следовательно,
он является моноидом. Однако, как это ни кажется странным на первый взгляд,
проверка с помощью функции <tt><b>IsMonoid</b></tt> возвращает противоположный
ответ:</div>
<blockquote><tt><b> gap&gt; IsMonoid(M);</b></tt><br>
  <tt><b> false</b></tt><br>
</blockquote>
 
<div align="left">
<div align="justify">На самом же деле (<u>и это описано в документации по
системе!</u>), этот ответ не является ошибочным - просто необходимо интерпретировать
его правильным образом. Для этого нужно рассмотреть тонкие различия между 
<i><b>категориями</b></i> и <i><b>свойствами</b></i> объектов в GAP. <br>
<br>
Дело в том, что указанная функция <tt><b>IsMonoid</b></tt> проверяет не то,
что объект фактически является моноидом (т.е. его <b><i>свойство </i></b>быть
моноидом), а только лишь то, был ли создан этот объект как моноид или нет
(т.е. проверяет его принадлежность к <i><b>категории </b></i>моноидов - <i>см.
ниже о понятии категории в GAP</i>). Здесь мы сталкиваемся с некоторыми тонкими
вопросами, связанными с особенностями программирования в системе GAP, язык
программирования которой является объектно-ориентированным языком.<br>
</div>
<br>
<div align="justify">Объектно-ориентированный подход позволяет иметь в GAP
одну функцию, применимую к различным типам объектов (например, функцию <tt><b>Size</b></tt>
для определения порядка объекта), и реализуемую посредством различных  <i><b>методов</b></i>,
которые применяются к тому или иному объекту в зависимости, в первую очередь,
от <i><b>категории</b></i>, к которой он принадлежит. Например, у функции
<tt><b>Size</b></tt> могут быть различные методы для определения порядка
групоида, полугруппы, моноида, группы, и т.д. <br>
</div>
<br>
<div align="justify">После определения категории объекта может быть произведен
дальнейший выбор методов из числа применимых для объектов данной категории
на основании набора <i><b>фильтров</b></i>, которыми он обладает (так, могут
быть свои отдельные методы для определения порядка групп подстановок, матричных
групп, и т.п.). <i><b>Фильтр</b></i> - это логическая функция, характеризующая
соответствующие параметры объекта (например, <tt><b>IsAbelian</b></tt>, <b><tt>IsPrime</tt></b>,
<b><tt>IsGroup </tt></b>и т.п.). Строго говоря, <i><b>категори</b><b>и</b></i>
-<i> </i>это также фильтры, но они характеризуются тем, что определяют, какие
<i><b>операции </b></i>применимы к объекту, тогда как в общем случае фильтр
может описывать и свойства объекта, не влияющие на применимость тех или иных
операций. Важно учесть, что категория объекта не может изменяться в процессе
работы с ним, тогда как <i><b>атрибуты</b></i> и <i><b>свойства</b></i> объекта
могут изменяться в процессе накопления знаний об объекте. <br>
</div>
<br>
</div>
<div align="justify">Как правило, подобные вопросы не возникают, если работа
ведется с алгебраическими структурами, лежащими в одной категории. Однако,
при переходах от одной категории у другой нужно быть осторожным. Несмотря
на что, что из наименования функции вида <tt><b>Is&lt;Имя структуры&gt;</b></tt>
нельзя сразу заметить, проверяет ли она свойство или принадлежность к категории,
в документации описание функции сопровождается примечанием <b>C</b> или <b>P</b>,
означающим соответственно <b>Category </b>или <b>Property</b>.<br>
</div>
<br>
<div align="justify">Если необходимо перевести объект из одной категории
в другую, в ряде случаев в GAP это можно сделать с помощью функции вида <tt><b>As&lt;Имя
структуры&gt;</b></tt>.Так, в следующем примере таблица умножения фактически
задает группу. Однако и <tt><b>IsMagmaWithInverses</b></tt>, и <tt><b>IsGroup
</b></tt>проверяют <i>категорию </i>объекта, а не то, что он является соответственно
группоидом, в котором каждый элемент обратим (без требования ассоциативности),
или группой. Функция же <tt><b>IsMonoid </b></tt>проверяет <i>свойство </i>(а
не категорию), и возвращает <tt><b>true</b></tt>, если объект категории групоидов
с единицей и заданная на нем операция ассоциативна. </div>
<blockquote><tt><b> gap&gt; m:=[[1,2,3],[2,3,1],[3,1,2]];<br>
 [ [ 1, 2, 3 ], [ 2, 3, 1 ], [ 3, 1, 2 ] ]<br>
gap&gt; M:=MagmaWithOneByMultiplicationTable(m); # обратите внимание <br>
                                              # на WithOne в имени функции<br>
 &lt;magma-with-one with 3 generators&gt;<br>
 gap&gt; IsMonoid(M);                             # объект является моноидом
(свойство)<br>
 true<br>
 gap&gt; IsMagmaWithInverses(M);                  # но не является групоидом
  <br>
 false                                         # с обратимыми элементами
(категория)<br>
 gap&gt; M:=MagmaWithInversesByMultiplicationTable(m);<br>
 &lt;magma-with-inverses with 3 generators&gt;<br>
 gap&gt; IsMagmaWithInverses(M);                  # теперь мы имеем групоид
  <br>
 true</b></tt><tt><b>                                          # с обратимыми
элементами (категория),<br>
  </b></tt><tt><b>gap&gt; IsGroup(M);                    </b></tt><tt><b>
         # но он не лежит в категории групп</b></tt><br>
  <tt><b> false</b></tt><br>
  <tt><b>gap&gt; G:=AsGroup(M);                           </b></tt><tt><b>#
только теперь мы рассматриваем </b></tt><br>
  <tt><b>&lt;group of size 3 with 1 generators&gt;           </b></tt><tt><b>#
его как группу,</b></tt><br>
  <tt><b>gap&gt; AsList(G);                               </b></tt><tt><b>#
состоящую из трех элементов</b></tt><br>
  <tt><b>[ m1, m2, m3 ]<br>
gap&gt; IsGroup(G);<br>
true</b></tt></blockquote>
<div align="justify">В следующем примере мы пытаемся задать группу и полугруппу.
Функция <tt><b>IsSemigroup</b></tt> проверяет свойство (а не категорию),
и возвращает <tt><b>true</b></tt>, если объект является групоидом с ассоциативной
операцией. Мы видим, что результат ее применения не зависит от того, был
ли задан объект как групоид или групоид с нейтральным элементом:</div>
<blockquote><b><tt> gap&gt; m:=[[1,1,1,1],[1,2,3,4],[1,3,4,2],[1,4,2,3]];<br>
 [ [ 1, 1, 1, 1 ], [ 1, 2, 3, 4 ], [ 1, 3, 4, 2 ], [ 1, 4, 2, 3 ] ]<br>
 gap&gt; M:=MagmaWithInversesByMultiplicationTable(m);<br>
 fail                # так как не каждый элемент является обратимым<br>
 gap&gt; M:=MagmaWithOneByMultiplicationTable(m);<br>
 &lt;magma-with-one with 4 generators&gt;<br>
 gap&gt; IsAssociative(M);<br>
 true<br>
 gap&gt; IsSemigroup(M);<br>
 true               </tt></b><b><tt></tt></b><b><tt>  # получили полугруппу</tt></b><br>
  <b><tt> gap&gt; M:=MagmaByMultiplicationTable(m);<br>
 &lt;magma with 4 generators&gt;<br>
 gap&gt; IsAssociative(M);<br>
 true<br>
 gap&gt; IsSemigroup(M);<br>
 true</tt></b><b><tt>                # также получили полугруппу</tt></b><br>
</blockquote>
 
<div align="justify">В заключение напомним, что, как уже говорилось выше,
задание таблицы умножения упорядочивает множество<b><tt> M</tt></b>. Поэтому
к элементам из групоида <tt><b>M</b></tt> можно обращаться по их порядковому
номеру в соответствии с таблицей умножения:</div>
<blockquote><tt><b> gap&gt; MultiplicationTable(AsList(M));<br>
 [ [ 1, 1, 1, 1 ], [ 1, 2, 3, 4 ], [ 1, 3, 4, 2 ], [ 1, 4, 2, 3 ] ]<br>
 gap&gt; Display(last);<br>
 [ [  1,  1,  1,  1 ],<br>
   [  1,  2,  3,  4 ],<br>
   [  1,  3,  4,  2 ],<br>
   [  1,  4,  2,  3 ] ]<br>
 gap&gt; elm:=MagmaElement(M,2);<br>
 m2<br>
  </b></tt></blockquote>
<div align="justify">С помощью функции <tt><b>Inverse </b></tt>можно находить
обратный элемент, если он существует (при этом не обязательно, чтобы <tt><b>M</b></tt>
было задано в категории моноидов - в последнем примере мы создали его с помощью
функции <b><tt> MagmaByMultiplicationTable</tt></b>):</div>
<blockquote><tt><b>gap&gt; Inverse(elm);<br>
 m2<br>
 gap&gt; Inverse(MagmaElement(M,3));<br>
 m4<br>
 gap&gt; Inverse(MagmaElement(M,1));<br>
 fail   # элемент не имеет обратного </b><br>
  </tt>
  <div align="center">  
  <div align="justify"> </div>
   
  <div align="left">   </div>
 </div>
</blockquote>
            
<hr width="100%" size="2"><i><font face="Arial,Helvetica"><font
 size="-1"><a href="Examples.htm"><br>
       Вернуться   к списку примеров</a></font></font></i> <br>
      <br>
     <br>
    <br>
   <br>
  <br>
 <br>
</body>
</html>
