<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                        
  <meta http-equiv="Content-Type" content="text/html; charset=koi8-r">
                        
  <meta name="Author" content="Alexander Konovalov">
                        
  <meta name="GENERATOR"
 content="Mozilla/4.76 [en]C-CCK-MCD (ITware edition)  (Win95; U) [Netscape]">
  <title>Система компьютерной алгебры GAP - учебные примеры</title>
</head>
  <body>
      <i><font face="Arial,Helvetica"><font size="-1"><a
 href="Examples.htm">Вернуться  к списку примеров</a> </font></font></i> 
    
<center>      
<hr width="100%"> </center>
            
<div align="center"><b><br>
Соответствия в системе GAP</b><br>
     </div>
         
<p>     Для задания соответствия в GAP необходимо указать область отправления
 <i>X</i>,  область прибытия <i>Y</i> и либо график соответствия <i>G</i>
(который является  списком, состоящим из упорядоченных пар, в которых первый
элемент принадлежит  области отправления, а второй - области прибытия), либо
функцию, которая будет определять элемент из <i>Y</i>, соответствующий заданному
элементу из <i>X</i>. <br>
     <br>
     Для задания соответствий с помощью графика используется функция <tt><b>GeneralMappingByElements</b></tt>. 
  В качестве примера зададим соответствие между множествами натуральных чисел 
  и целых чисел, определяемое упорядоченными парами (1,1), (2,2), (2,-2), 
(3,3)  и (4,3). Обратите внимание на то, что обыкновенный список их двух элементов
 <tt><b>[a,b]</b></tt> является упорядоченной парой в обычном понимании этого
 термина, однако не может быть использован для задания графика соответствия 
  - к нему необходимо сначала применить функцию <tt><b>Tuple </b></tt>для 
 создания  упорядоченной пары специального вида.     </p>
<blockquote><b><tt>gap&gt; l:=[[1,1],[2,2],[2,-2],[3,3],[4,3]];</tt></b><br>
       <b><tt>[ [ 1, 1 ], [ 2, 2 ], [ 2, -2 ], [ 3, 3 ], [ 4, 3 ] ]</tt></b><br>
       <b><tt>gap&gt; lt:=List(l,Tuple);</tt></b><br>
       <b><tt>[ Tuple( [ 1, 1 ] ), Tuple( [ 2, 2 ] ), Tuple( [ 2, -2 ] ), 
  <br>
       Tuple( [ 3, 3 ] ), Tuple( [ 4, 3 ] ) ]</tt></b><br>
       <b><tt>gap&gt; f:=GeneralMappingByElements(PositiveIntegers,Integers,lt);</tt></b><br>
       <b><tt>&lt;general mapping: PositiveIntegers -&gt; Integers &gt;</tt></b><br>
     </blockquote>
     Для задания соответствий вторым способом используется функция <tt><b>MappingByFunction</b></tt>. 
  В качестве примера зададим функцию, которая каждому целому числу будет ставить
  в соответствие его остаток от деления на 2:     
<blockquote><tt><b>gap&gt; g:=MappingByFunction(Integers,Integers, x -&gt; 
  x mod 2);</b><br>
       <b>MappingByFunction( Integers, Integers, function( x ) ... end )</b><br>
       </tt></blockquote>
     Область отправления и область прибытия соответствия определяются с помощью 
  функций <tt><b>Source </b></tt>и <tt><b>Range </b></tt>соответственно: 
   
<blockquote><b><tt>gap&gt; Source(f);<br>
     PositiveIntegers<br>
     gap&gt; Source(g);<br>
     Integers<br>
     gap&gt; Range(f);<br>
     Integers<br>
     gap&gt; Range(g);<br>
     Integers<br>
       </tt></b></blockquote>
     Если <tt><b>f</b></tt> - cоответствие, то определяющее его отношение 
можно   получить с помощью функции <tt><b>UnderlyingRelation</b></tt>. Обратно, 
имея отношение, можно узнать соответствие, из которого оно получено, с помощью
  функции <b><tt>UnderlyingGeneralMapping</tt></b>:    
<blockquote><b><tt> gap&gt; r1:=UnderlyingRelation(f);<br>
     &lt;object&gt;<br>
     gap&gt; r2:=UnderlyingRelation(g);<br>
     &lt;object&gt;<br>
    gap&gt; g=UnderlyingGeneralMapping(r2);<br>
     true<br>
      </tt></b></blockquote>
     Поскольку <b><tt>r1</tt></b> конечно, мы можем теперь получить график
 соответствия  как список элементов <b><tt>r1</tt></b>:<br>
       
<blockquote><tt><b>gap&gt; l:=AsList(r1);<br>
     [ Tuple( [ 1, 1 ] ), Tuple( [ 2, 2 ] ), Tuple( [ 2, -2 ] ), <br>
      Tuple( [ 3, 3 ] ), Tuple( [ 4, 3 ] ) ]<br>
      </b></tt></blockquote>
     После этого несложно вычислить его область определения и область значения,
  получив их как множество соответственно первых и вторых компонент упорядоченных
  пар, входящих в его график:<br>
         
<blockquote><b><tt>gap&gt; Set(List(l, x -&gt; x[1]));<br>
     [ 1, 2, 3, 4 ]<br>
     gap&gt; Set(List(l, x -&gt; x[2]));<br>
     [ -2, 1, 2, 3 ]<br>
      </tt></b></blockquote>
     Для второго соответствия мы не можем получить бесконечный список упорядоченных
  пар, но зато можем проверить, принадлежит ли та или иная упорядоченная
пара   графику соответствия:<br>
         
<blockquote><b><tt>gap&gt; Tuple([10,0]) in r2;<br>
     true<br>
     gap&gt; Tuple([10,1]) in r2;<br>
     false<br>
      </tt></b></blockquote>
     Далее, образы и прообразы элементов можно находить с помощью функций 
<tt><b>Images  </b></tt>и <tt><b>PreImages </b></tt>(см. также другие функции 
для работы  с образами и прообразами в конце данной статьи):   
<blockquote><tt><b> gap&gt; Images(f,1);</b><br>
     <b>  [ 1 ]</b><br>
     <b>  gap&gt; Images(f,2);</b><br>
     <b>  [ -2, 2 ]</b><br>
     <b>  gap&gt; PreImages(f,2);</b><br>
     <b>  [ 2 ]</b><br>
     <b>  gap&gt; PreImages(f,3);</b><br>
     <b>  [ 3, 4 ]</b></tt><br>
   </blockquote>
     Обратное соответствие определяется с помощью функции  <tt><b>InverseGeneralMapping</b></tt>: 
  
<blockquote><tt><b> gap&gt; InverseGeneralMapping(f);</b><br>
     <b>  InverseGeneralMapping( &lt;general mapping: PositiveIntegers -&gt; 
 Integers  &gt; )</b><br>
     </tt></blockquote>
     Функция <tt><b>CompositionMapping </b></tt>вычисляет композицию соответствий. 
 Пример ее применения будет дан ниже. Обратите внимание на порядок записи 
аргументов в ней - соответствия начинают рассматриваться, начиная с последнего. 
<br>
    <br>
    Завершим первую половину статьи заданием двух соответствий специального 
 вида. С помощью функции <tt><b>IdentityMapping </b></tt>задается тождественное 
 отображение:   
<blockquote><tt><b> gap&gt; i:=IdentityMapping(Integers);</b><br>
     <b>  IdentityMapping( Integers )</b><br>
     <b>  gap&gt; Images(i,100);</b><br>
     <b>  [ 100 ]</b><br>
     </tt></blockquote>
    Далее, если область прибытия содержит нулевой элемент, то можно задать
 отображение  в него всех элементов области отправления с помощью функции
<tt><b>ZeroMapping</b></tt>:   
<blockquote><b><tt> gap&gt; z:=ZeroMapping(PositiveIntegers,Integers);</tt></b><br>
     <b><tt>  ZeroMapping( PositiveIntegers, Integers )</tt></b><br>
     <b><tt>  gap&gt; Images(z,2);</tt></b><br>
     <b><tt>  [ 0 ]</tt></b><br>
   </blockquote>
     Прежде чем перейти к следующему примеру, необходимо сделать небольшое
 примечание  об ограничениях, налагаемых в GAP на область отправления и область
 прибытия.  Для задания соответствия они должны являться <b><i>доменами</i></b>
 (<i><b>domain</b></i>)  - так в GAP называются множества с дополнительной
 структурой (например, группы,  классы сопряженных элементов, векторные пространства
 и т.п.). Поэтому в предыдущих  примерах в их областей отправления и прибытия
 использовались системы натуральных  и целых чисел, а не их конечные подмножества.
 Примерам соответствий, в которых областями отправления и прибытия являются
 <i>конечные</i> множества с дополнительной алгебраической структурой, посвящена
 вторая половина данной статьи. Тем, кто впервые изучает курс алгебры, рекомендуется
 вернуться к этому материалу после ознакомления с элементами теории групп.<br>
     <br>
     Для построения примера сначала зададим симметрические группы подстановок 
  третьей и второй степени:   
<blockquote><tt><b>  gap&gt; S3:=SymmetricGroup(3);</b><br>
     <b>  Sym( [ 1 .. 3 ] )</b><br>
     <b>  gap&gt; S2:=SymmetricGroup(2);</b><br>
     <b>  Sym( [ 1 .. 2 ] )</b><br>
     </tt></blockquote>
     Кроме того, нам понадобится мультипликативная группа кольца целых чисел 
 {-1,1}.Для ее задания мы сначала создадим полугруппу, порожденную -1, а потом
 укажем, что будем рассматривать ее, как группу:   
<blockquote><b><tt>  gap&gt; U:=Semigroup(-1);<br>
      &lt;semigroup with 1 generator&gt;<br>
      gap&gt; AsList(U);<br>
      [ -1, 1 ]<br>
     gap&gt; U:=AsGroup(U);<br>
      &lt;group of size 2 with 1 generators&gt;<br>
     </tt></b></blockquote>
     <b>Примечание.</b> Для построения примера было бы достаточно использовать 
  полугруппу <tt><b>U</b></tt>, однако мы превратили ее в группу, чтобы обратить 
 внимание на еще одну тонкость. Дело в том, что в GAP нельзя непосредственно 
 задать группу, состоящую из целых, рациональных или комплексных чисел, так 
 как тогда невозможно будет однозначно истолковать операцию  <b><tt>^</tt></b>, 
 которая, в зависимости от аргументов, может означать как возведение в степень, 
 так и сопряжение с помощью элемента группы (и даже образ элемента под действием 
 отображения). Поэтому <tt><b>U</b></tt> сначала задается в виде полугруппы,
  а потом "превращается" в группу.<br>
     <br>
     Теперь зададим цепочку соответствий между <tt><b>S3</b></tt>, <tt><b>U</b></tt> 
 и <tt><b>S2</b></tt>. Первое из них будет отображать подстановки из <b><tt>S3</tt></b> 
 в их знак, равный единице, если подстановка четная, и -1, если подстановка 
 нечетная:   
<blockquote><tt><b>  gap&gt; f:=MappingByFunction(S3,U, SignPerm);</b><br>
     <b>  MappingByFunction( Sym( [ 1 .. 3 ] ), &lt;group of size 2 with
1  generators&gt;,  <br>
            function( perm ) ... end )</b></tt><br>
   </blockquote>
     Второе отображение действует из <tt><b>U</b></tt> в <tt><b>S2</b></tt> 
 и отображает -1 в тождественную подстановку <tt><b>()</b></tt>, а 1 - в транспозицию
 <b><tt>(1,2)</tt></b>. Заметим, что отображение <b><tt>g</tt></b> намеренно
 выбрано таким образом, чтобы оно не являлось гомоморфизмом, поскольку в
для  гомоморфизмов в GAP имеются свои, более эффективные инструменты.   
<blockquote><tt><b>  gap&gt; g:=GeneralMappingByElements(U,S2,[Tuple([-1,()]),Tuple([1,(1,2)])]);</b><br>
     <b>  &lt;general mapping: Group( [ -1 ] ) -&gt; SymmetricGroup( [ 1
..  2 ] ) &gt;</b><br>
     </tt></blockquote>
     Наконец, третье соответствие отображает все подстановки из <tt><b>S2</b></tt> 
 в тождественную  подстановку, а четвертое является тождественным отображением 
 на <tt><b>S2</b></tt>:   
<blockquote><b><tt>  gap&gt; h:=MappingByFunction(S2,S2, x -&gt; ());</tt><br>
     <tt>  MappingByFunction( Sym( [ 1 .. 2 ] ), Sym( [ 1 .. 2 ] ), function( 
 x ) ...  end )</tt><br>
     <tt>  gap&gt; i:=IdentityMapping(S2);</tt><br>
     <tt>  IdentityMapping( Sym( [ 1 .. 2 ] ) )</tt></b><br>
   </blockquote>
     Теперь мы можем вычислить композицию <tt><b>g</b></tt> и <tt><b>h</b></tt> 
 (обратите внимание на порядок  следования отображений - они выполняются в
 обратном порядке):   
<blockquote><tt><b>  comp:=CompositionMapping(h,g);</b><br>
     <b>  CompositionMapping( &lt;general mapping: SymmetricGroup( [ 1 .. 
2  ] ) -&gt;  <br>
     SymmetricGroup( </b><b>[ 1 .. 2 ] ) &gt;, &lt;general mapping: Group(
 [ -1 ] ) -&gt; <br>
     SymmetricGroup(  [ 1 .. 2 ] ) &gt; )</b></tt><br>
   </blockquote>
     Аналогично вычисляется композиция трех отображений:   
<blockquote><tt><b>  gap&gt; comp:=CompositionMapping(h,g,f);</b><br>
     <b>  CompositionMapping( MappingByFunction( Sym( [ 1 .. 2 ] ), Sym(
[  1 .. 2 ] ), <br>
     function( x ) ... end ), </b><b>CompositionMapping( &lt;general mapping: 
 Group( [ -1 ] ) -&gt;<br>
     SymmetricGroup(  [ 1 .. 2 ] ) &gt;, </b><b>MappingByFunction( Sym( [ 
1  .. 3 ] ), <br>
     &lt;group of size 2 with 1 generators&gt;,   function( perm ) ... end
 ) ) )</b></tt><br>
   </blockquote>
     Легко видеть, что последнее отображение переводит любой элемент группы 
 <tt><b>S3</b></tt>  в тождественную подстановку. Проверим это, например, 
для подстановки <b><tt>(1,2,3)</tt></b>,  обратив внимание на еще один вариант 
 записи образа элемента относительно отображения:<br>
        
<blockquote><b><tt>gap&gt; (1,2,3)^comp;<br>
     ()<br>
     </tt></b></blockquote>
     Функция <tt><b>InverseGeneralMapping </b></tt>вычисляет обратное соответствие. 
 Вычислим обратное соответствие к соответствию <tt><b>g</b></tt>, а затем 
найдем образы  элементов <tt><b>S2</b></tt> под его действием:   
<blockquote><b><tt>  gap&gt; v:=InverseGeneralMapping(g);<br>
     InverseGeneralMapping( &lt;mapping: Group( [ -1 ] ) -&gt; SymmetricGroup( 
  [ 1 .. 2 ] ) &gt; )<br>
     gap&gt; ()^v;<br>
     -1<br>
     gap&gt; (1,2)^v;<br>
     1<br>
     </tt></b></blockquote>
     Для использования в последующих примерах вычислим композицию <tt><b>t</b></tt> 
 соответствий <tt><b>f</b></tt> и <b><tt>g</tt></b>:<br>
        
<blockquote><tt><b>gap&gt; t:=CompositionMapping(g,f);<br>
     CompositionMapping( &lt;mapping: Group( [ -1 ] ) -&gt; <br>
     SymmetricGroup( [ 1 .. 2 ] ) &gt;, MappingByFunction( Sym( [ 1 .. 3
]  ),   <br>
     &lt;group of size  2 with 1 generators&gt;, function( perm ) ... end 
)  )</b><br>
     </tt></blockquote>
     Очевидным образом определяется, является ли <tt><b>t</b></tt> всюду
определенным,  функциональным,  инъективным, сюръективным и биективным: 
   
<blockquote><b><tt>gap&gt; IsTotal(t);</tt><br>
       <tt>true</tt><br>
       <tt>gap&gt; IsSingleValued(t);</tt><br>
       <tt>true</tt><br>
       <tt>gap&gt; IsInjective(t);</tt><br>
       <tt>false</tt><br>
       <tt>gap&gt; IsSurjective(t);</tt><br>
       <tt>true</tt><br>
       <tt>gap&gt; IsBijective(t);</tt><br>
       <tt>false</tt><br>
       </b></blockquote>
     Как и в предыдущих примерах, мы можем получить график соответствия <tt><b>t</b></tt>:<br>
         
<blockquote><b><big><tt><small>gap&gt; UnderlyingRelation(t);<br>
     &lt;object&gt;<br>
     gap&gt; AsList(last);<br>
     [ Tuple( [ (), (1,2) ] ), Tuple( [ (2,3), () ] ), Tuple( [ (1,2), () 
]  ),    <br>
       Tuple( [ (1,2,3), (1,2) ] ), Tuple( [ (1,3,2), (1,2) ] ), Tuple( [ 
(1,3),   () ] ) ]<br>
       </small></tt></big></b></blockquote>
     В завершение укажем функции, которые используются для определения образов 
  и прообразов отдельных элементов и их множеств. Напомним, что область отправления 
 и область прибытия опредеделяются с помощью функций Source и Range соответвственно:<br>
        
<blockquote><tt><b>gap&gt; Range(t);<br>
     Sym( [ 1 .. 2 ] )<br>
     gap&gt; Source(t);<br>
     Sym( [ 1 .. 3 ] )<br>
     </b></tt></blockquote>
   Образ соответствия можно определять с помощью функций <b><tt>ImagesSource 
 </tt></b>или <tt><b>Image</b></tt>:<br>
     
<blockquote><tt><b>gap&gt; ImagesSource(t);</b><br>
     <b>  Sym( [ 1 .. 2 ] )</b><br>
     <b>  gap&gt; Image(t);</b><br>
     <b>  Sym( [ 1 .. 2 ] )</b></tt><br>
   </blockquote>
   Кроме того, имеются различные функции для определения образов элемента 
или  даже целого множества: <br>
     
<blockquote><tt><b>  gap&gt; ImagesElm(t,(1,2,3));            # множество 
 всех образов элемента</b><br>
    <b>  [ (1,2) ]</b><br>
    </tt><tt><b>gap&gt; ImagesRepresentative(t,(1,2,3)); # представитель
множества  образов элемента<br>
     </b><b>(1,2)</b><br>
     <b>gap&gt; ImagesSet(t,[(1,2,3),(1,2)]);    # множество всех образов 
элементов  множества</b><br>
     <b>  [ (), (1,2) ]                         # (второй аргумент и результат 
 - множества)</b><br>
     </tt><tt><b>  gap&gt; Images(t,[(1,2,3),(1,2)]);       # образ множества 
 или поддомена<br>
     </b><b>  [ (), (1,2) ]                         # (второй аргумент и
результат  - <br>
                                         # множества или домены)</b></tt><br>
    <tt><b>gap&gt; ImageElm(t,(1,2,3));             # образ элемента (для 
всюду  определенного</b><br>
     <b>  (1,2)                                 # и функционального соответствия)</b><br>
     <b>gap&gt; Image(t,(1,2,3));                # для всюду определенного
 и функционального</b><br>
     <b>  (1,2)                                 # соответствия в зависмости 
 от второго аргумента<br>
                                         # - образ всего соответствия, отдельного<br>
                                         # элемента, подмножества или поддомена 
   </b><br>
     </tt></blockquote>
   <br>
   Аналогичная функциональность имеется и для прообразов:   
<blockquote><b><tt>gap&gt; PreImagesRange(t);               # прообраз (область 
 определения) соответствия</tt><br>
     <tt>  Sym( [ 1 .. 3 ] )</tt><br>
     <tt>  gap&gt; PreImagesElm(t,());              # множество всех прообразов 
 элемента</tt><br>
     <tt>  [ (2,3), (1,2), (1,3) ]<br>
     </tt></b><b><tt>gap&gt; PreImagesRepresentative(t,());   # представитель 
 множества прообразов элемента   </tt></b><b><br>
    <tt>  (2,3)</tt></b><br>
     <b><tt>gap&gt; PreImagesSet(t,[(1,2)]);         # множество всех прообразов 
 элементов множества</tt><br>
    <tt>  [ (), (1,2,3), (1,3,2) ]</tt></b><br>
     <b><tt>  gap&gt; PreImages(t);                    # прообраз (область
 определения соответствия)</tt><br>
      <tt>  Sym( [ 1 .. 3 ] )</tt><br>
      <tt>  gap&gt; PreImages(t,(1,2));              # прообраз элемента</tt><br>
      <tt>  [ (), (1,2,3), (1,3,2) ]</tt><br>
      <tt>  gap&gt; PreImages(t,[(),(1,2)]);         # прообраз множества 
или  поддомена</tt><br>
      <tt>  [ (), (2,3), (1,2), (1,2,3), (1,3,2), (1,3) ]</tt></b><br>
      <b><tt>gap&gt; PreImageElm(g,(1,2));            # прообраз элемента 
(для  инъективного и</tt><br>
     <tt>  1                                     # сюръективного соответствия)</tt><br>
     <tt>gap&gt; PreImage(t);                     # прообраз  соответствия
(не обязательно</tt><br>
     <tt>  Sym( [ 1 .. 3 ] )                     # сюръективного и инъективного)</tt><br>
     <tt>  gap&gt; PreImage(g,(1,2));               # прообраз элемента (для 
 сюръективного</tt><br>
     <tt>  1                                     # и инъективного соответствия</tt><br>
     <tt>  gap&gt; PreImage(g,[(),(1,2)]);          # прообраз множества
или  поддомена (для</tt><br>
     <tt>  [ -1, 1 ]                             # инъективного и сюръективного 
 соответствия,<br>
                                         # результат - множество или домен)</tt><br>
     </b></blockquote>
   Более подробно различия между функциями для работы с образами и прообразами, 
 а также особенности их использования описаны в разделе <a
 href="http://www.gap-system.org/Manuals/doc/ref/chap32.html">"Mappings"</a>
 документации по системе GAP. <i><font face="Arial,Helvetica"><font
 size="-1"><a href="Examples.htm"><br>
<br>
</a></font></font></i>
<hr width="100%" size="2"><i><font face="Arial,Helvetica"><font
 size="-1"><a href="Examples.htm"><br>
Вернуться   к списку примеров</a></font></font></i>
</body>
</html>
