<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
                
  <meta name="Author" content="Alexander Konovalov">
                
  <meta name="GENERATOR"
 content="Mozilla/4.76 [en]C-CCK-MCD (ITware edition)  (Win95; U) [Netscape]">
  <title>Система компьютерной алгебры GAP - учебные примеры</title>
</head>
  <body>
    <i><font face="Arial,Helvetica"><font size="-1"><a
 href="Examples.htm">Вернуться  к списку примеров</a> </font></font></i> 
  
<center>    
<hr width="100%"> </center>
        
<div align="center"><b><br>
Числовые системы в GAP</b><br>
   </div>
     
<p>  Для начала покажем, как в системе задаются целые и рациональные числа.
Задание целых чисел производится очевидным образом:<br>
 </p>
<blockquote><big><tt><small><b> gap&gt; 123456789; # результат ввода отображается 
на экране<br>
  123456789<br>
  gap&gt; a:=123456789; # присвоим это же значение переменной a<br>
  123456789<br>
  gap&gt; a; # теперь посмотрим значение переменной a<br>
  123456789</b></small><br>
   </tt></big></blockquote>
  Рациональные числа представляются в виде несократимых дробей. Если ввести
 рациональное число, которое является сократимой дробью, оно будет преобразовано
 в несократимую:<br>
 
<blockquote><b><tt>gap&gt; 12/19; # правильная дробь<br>
  12/19<br>
  gap&gt; 54564/19; # неправильная дробь<br>
  54564/19<br>
  gap&gt; 500/6000; # сократимая дробь<br>
  1/12<br>
   </tt></b></blockquote>
  Над целыми и рациональными числами можно выполнять операции сложения, вычитания,
 умножения, деления, нахождения остатка от деления на заданное число, и возведения
 в степень:<br>
 
<blockquote><b><tt> gap&gt; (15+12)*30/121;<br>
  810/121<br>
  gap&gt; 154654 mod 13; # остаток от деления на 13<br>
  6<br>
  gap&gt; 2^100; # возведение в 100-ю степень<br>
  1267650600228229401496703205376<br>
 gap&gt; 2^1000; # вывод 2^1000 на экран занимает несколько строк<br>
  107150860718626732094842504906000181056140481170553360744375038837<br>
  035105112493612249319837881569585812759467291755314682518714528569<br>
 231404359845775746985748039345677748242309854210746050623711418779<br>
 541821530464749835819412673987675591655439460770629145711964776865<br>
 42167660429831652624386837205668069376<br>
   </tt></b></blockquote>
   При этом важно учитывать приоритет выполнения этих операций. Например, 
<tt><b>154654-6 mod 13</b></tt> возвращает <b><tt>154648</tt></b>, а <b><tt>(154654-6) 
mod 13</tt></b> возвращает <b><tt>0</tt></b>, поскольку первый вариант будет 
интерпретирован как <tt><b>154654-(6 mod 13)</b></tt>.<br>
 <br>
  В системе GAP нет ограничений на абсолютную величину целых и рациональных 
чисел, с которыми может работать система &#8211; она ограничена только объемом доступной
памяти. Например, найдем количество цифр в десятичной записи числа <b><tt>2^15935</tt></b>:<br>
 
<blockquote><b><tt> gap&gt; a:=2^15935;;<br>
  gap&gt; Length(String(a));<br>
  4797<br>
   </tt></b></blockquote>
  Таким образом, в записи этого числа <b>4797 цифр!!! </b>Это максимальная 
степень числа 2, которая будет <i><b>отображаться</b></i> на экране (для этого
потребуется более 50 строк при ширине экрана 80 символов)! Но <i><b>оперировать</b></i> 
мы можем и с гораздо большими числами, даже не видя при этом их отображения 
на экране. Например, найдем остатки от деления 2^20000 на 11 и 12:<br>
 
<blockquote><b><tt> gap&gt; b:=2^20000;<br>
  &lt;&lt;an integer too large to be printed&gt;&gt;<br>
 gap&gt; b mod 11;<br>
  1<br>
  gap&gt; b mod 12;<br>
  4<br>
   </tt></b></blockquote>
 Следует заметить, что идеология работы с числовыми системами в GAP отличается 
от той, которая является привычной для пользователя, например, языков программирования 
Pascal или Fortran. Во-первых, в системе GAP нет приближенных вычислений с
действительными числами. Вместо этого в ней есть точные вычисления с рациональными 
числами, которые представляются несократимыми дробями. Во-вторых, целые и 
рациональные числа задаются соответственно командами <tt><b>Integers </b></tt>и 
<tt><b>Rationals</b></tt>, но это не описание типа переменной, как в некоторых 
языках программирования, а задание алгебраических структур:<br>
 
<blockquote><b><tt>gap&gt; I:=Integers;<br>
 Integers<br>
 gap&gt; Q:=Rationals;<br>
 Rationals</tt></b></blockquote>
 С этими структурами можно выполнять ряд различных действий. Например, проверить, 
является ли заданное число целым и рациональным (это же можно сделать и с 
помошью функций <tt><b>IsInt</b></tt> и <tt><b>IsRat</b></tt>):<br>
 
<blockquote><b><tt>gap&gt; 12/20 in I;<br>
  false<br>
 gap&gt; IsInt(12/20);<br>
 false<br>
  gap&gt; 15156 in Integers; #<br>
  true<br>
  gap&gt; 125 in Rationals; #<br>
  true<br>
  gap&gt; 125/13 in Q; #<br>
  true<br>
 gap&gt; IsRat(125/13);<br>
 true<br>
   </tt></b></blockquote>
 Далее, можно проверить ряд алгебраических свойств систем целых и рациональных 
чисел, например: 
<blockquote><b><tt>gap&gt; IsFinite(Integers); # конечность</tt><br>
   <tt> false</tt><br>
   <tt> gap&gt; IsCommutative(Integers); # коммутативность по умножению</tt><br>
   <tt> true</tt><br>
   <tt> gap&gt; IsAdditivelyCommutative(Integers); # коммутативность по сложению</tt><br>
   <tt> true</tt><br>
   <tt>gap&gt; Units(Integers); # обратимые элементы относительно умножения</tt><br>
   <tt> [-1, 1]</tt><br>
   <tt> gap&gt; Zero(Integers); # нулевой элемент относительно сложения</tt><br>
   <tt> 0</tt><br>
   <tt>gap&gt; IsField(Rationals); # образуют ли рациональные числа поле</tt><br>
   <tt> true</tt><br>
   <tt>gap&gt; MultiplicativeNeutralElement(Rationals); # нейтральный элемент<br>
                                               # относительно умножения</tt><br>
   <tt> 1</tt></b><br>
 </blockquote>
    Аналогичным образом можно задавать множества положительных и неотрицательных 
целых чисел с помощью функций <tt><b>PositiveIntegers </b></tt>и <b><tt>NonnegativeIntegers</tt></b>.<br>
  <br>
 В свою очередь, функции <tt><b>GaussianIntegers </b></tt>и <b><tt>GaussianRationals 
</tt></b>задают соответственно подкольцо Z [<i>i</i>] поля комплексных чисел, 
и поле Q(<i>i</i>), где <i>i</i><sup>2</sup> = -1, и в GAP задается как E(4):<br>
 <b><tt>gap&gt; L:=GaussianIntegers;<br>
 GaussianIntegers<br>
 gap&gt; x:=Random(L); # выберем случайным образом элемент из L<br>
 1-4*E(4)<br>
 gap&gt; y:=10+2/5*E(4); # второй элемент зададим вручную<br>
 10+2/5*E(4)<br>
 gap&gt; x*y; # найдем их произведение<br>
 58/5-198/5*E(4)<br>
 gap&gt; x*y in L; # оно не является целым Гауссовым числом<br>
 false<br>
 gap&gt; x*y in GaussianRationals; # зато является рациональным Гауссовым 
числом<br>
 true</tt></b>     
<p> </p>
     
<p> </p>
     
<hr width="100%"> <br>
   <i><font face="Arial,Helvetica"><font size="-1"><a
 href="Examples.htm">Вернуться   к списку примеров</a> </font></font></i>
 <br>
  <br>
 <br>
</body>
</html>
