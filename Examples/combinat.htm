<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
                                                                        
                                                              
  <meta http-equiv="content-type" content="text/html; charset=KOI8-R">
  <title>Элементы теории колец</title>
                                                                        
          
  <meta name="description" content="Элементы комбинаторики">
                                   
  <meta name="author" content="А.Б.Коновалов">
</head>
  <body>
                           <font face="Helvetica, Arial, sans-serif"><small>
    </small></font>                <i><font face="Arial,Helvetica"><font
 size="-1"><a href="Examples.htm">Вернуться к списку примеров</a></font></font></i>
          
<div align="left">        
<div align="left">        
<div align="left">        
<div align="left">              
<hr width="100%" size="2">   </div>
                  </div>
                                 
<center></center>
                  </div>
                                       
<div align="left"><b><small><font face="Helvetica, Arial, sans-serif"><br>
           </font></small></b>           
<div align="center"><font face="Times New Roman, Times, serif"><big><big><b><small>Элементы
   комбинаторики</small></b></big></big></font>   </div>
           </div>
                   <br>
                 
<div align="justify">         
<div align="justify"> Данный раздел посвящен обзору основных функций системы 
    компьютерной алгебры GAP, связанных с комбинаторикой. Более подробно о
 них   и других комбинаторных функциях можно узнать в разделе "Комбинаторика" 
 справочного   руководства по системе GAP.  <br>
         </div>
                      
<p align="justify">Функция  <code><b>Factorial(n)</b>  </code><var></var><code></code>возвращает 
  <i>n</i>!   = 1 * 2 * ... * <i>n</i>  для натурального числа <i>n</i><i>. 
  </i> Значение   0! полагается равным 1. Например, вычислим <i>n</i>! для 
 целых чисел от нуля до 10:<br>
        </p>
               
<p align="justify"><tt><b>    gap&gt; List( [0..10], Factorial );</b></tt><b><br>
        <tt>    [ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800
]</tt></b></p>
                  
<p><i>n</i>! можно интерпретировать следующим образом. Пусть <i>M</i> - множество
    из <i>n </i>элементов. Всякое расположение элементов множества <i>M </i>в 
   некотором определенном порядке называется <i><b>перестановкой</b></i> из
  <i>n</i> элементов.  Тогда количество различных <b><i>перестановок</i></b> 
   из <i>n</i> элементов равняется <i>n</i>!.<br>
        </p>
               
<p>Заметим, что в явном виде все эти перестановки можно получить с помощью
    функции <b><code>PermutationsList</code></b>.  Эта функция возвращает
множество    всех перестановок из элементов заданного множества:<br>
        </p>
               
<p><tt><b>gap&gt; pl:=PermutationsList([1,2,3]);<br>
        [ [ 1, 2, 3 ], [ 1, 3, 2 ], [ 2, 1, 3 ], [ 2, 3, 1 ], [ 3, 1, 2 ],
 [  3,  2, 1 ] ]<br>
        gap&gt; Length(pl)=Factorial(3);      # количество перестановок = 
6  =  3!<br>
        true<br>
        </b></tt></p>
               
<p>С помощью функции <tt><b>PermutationList</b></tt> можно также находить
    перестановки с повторениями, которые получаются, если рассматривать упорядоченные
    наборы из <i>k</i> элементов множества <i>M</i> = {<i>s</i><sub>1</sub>,
   ... <i>s<sub>n</sub></i>}, в которых элемент <i>s<sub>i</sub></i> содержится
   ровно <i>v<sub>i</sub></i> раз и <i>v</i><sub>1</sub>+...+<i>v<sub>n</sub></i>
   = <i>k</i>. (Тогда перестановки множества из <i>n</i> элементов получаем
  при <i>v</i><sub>1</sub> = ... =<i> v<sub>n</sub></i> = 1).  Число <i>C<sub>k</sub></i>(<i>v</i><sub>1</sub>,...,<i>v<sub>n</sub></i>)
    различных перестановок множества <i>M</i> с повторениями равно <i>k</i>!
   / (<i>v</i><sub>1</sub>! ...<i>v<sub>n</sub></i>!) и может быть получено
  с помощью функции <b><code>NrPermutationsList</code></b>.<br>
        </p>
               
<p><b>Пример 1:</b> составить всевозможные слова из четырех букв, содержащие
    два раза букву "a", один раз букву "b" и один раз букву "c":</p>
               
<p>gap&gt; PermutationsList(["a","a","b","c"]);  <br>
        [ [ "a", "a", "b", "c" ], [ "a", "a", "c", "b" ], [ "a", "b", "a",
 "c"   ],  <br>
          [ "a", "b", "c", "a" ], [ "a", "c", "a", "b" ], [ "a", "c", "b",
 "a"   ],  <br>
          [ "b", "a", "a", "c" ], [ "b", "a", "c", "a" ], [ "b", "c", "a",
 "a"   ],  <br>
          [ "c", "a", "a", "b" ], [ "c", "a", "b", "a" ], [ "c", "b", "a",
 "a"   ]  ]<br>
        gap&gt; List(last,Concatenation);             <br>
        [ "aabc", "aacb", "abac", "abca", "acab", "acba", "baac", "baca", 
"bcaa",    <br>
          "caab", "caba", "cbaa" ]</p>
               
<p><b>Пример 2:</b> определить количество различных 10-значных чисел, содержащих
    трижды цифру 1, дважды цифру 5, дважды цифру 7, и по одной цифре 3, 4,
 9:<br>
        </p>
               
<p><tt><b>gap&gt; NrPermutationsList([1,1,1,5,5,7,7,3,4,9]);<br>
        151200</b></tt>  </p>
           
<p>Функция <code>Binomial( </code><var>n</var><code>, </code><var>k</var><code>
     )</code> возвращает <b>биномиальный коэффициент</b>  <i>C<sub>n</sub><sup>k</sup></i>
   <i>= n</i>!   / (<i>k</i>! (<i>n</i><font face="symbol">&#8722;</font><i>k</i>)!),
   т.е. коэффициент при <i>x</i><sup><i>k</i></sup> в многочлене (<i>x</i>
 +  1)<sup><i>n</i></sup>.</p>
           
<pre><b>gap&gt; List( [0..4], k-&gt;Binomial( 4, k ) ); <br>[ 1, 4, 6, 4, 1 ]<br>gap&gt; x:=Indeterminate(Integers,"x");;<br>gap&gt; (1+x)^4;<br>x^4+4*x^3+6*x^2+4*x+1<br>gap&gt; CoefficientsOfUnivariatePolynomial( (1+x)^4 );<br>[ 1, 4, 6, 4, 1 ]<br>gap&gt; List( [0..6], n-&gt;List( [0..6], k-&gt;Binomial( n, k ) ) );;<br>gap&gt; PrintArray( last );  # нижний треугольник называется треугольником Паскаля<br>[ [   1,   0,   0,   0,   0,   0,   0 ],<br>  [   1,   1,   0,   0,   0,   0,   0 ],<br>  [   1,   2,   1,   0,   0,   0,   0 ],<br>  [   1,   3,   3,   1,   0,   0,   0 ],<br>  [   1,   4,   6,   4,   1,   0,   0 ],<br>  [   1,   5,  10,  10,   5,   1,   0 ],<br>  [   1,   6,  15,  20,  15,   6,   1 ] ]</b></pre>
         
<p>Кроме того, <i>C<sub>n</sub><sup>k</sup></i> показывает количество <i><b>сочетаний</b></i>
   из <i>n</i> элементов по <i>k</i>, т.е. количество <i>k</i>-элементных
подмножеств   множества, состоящего из <i>n</i> элементов.</p>
         
<pre><tt><b>gap&gt; Binomial(49,6);  <br>13983816<br>gap&gt; Binomial(36,5);  <br>376992</b></tt></pre>
           
<div align="justify">Сами же эти эти сочетания можно получить с помощью функции 
  <b><code>Combinations(</code><var> set</var><code>, </code><var>k </var><code>)</code></b>. 
  Например, найдем всевозможные тройки, которые можно составить из чисел 1,
  2 , 3 , 4, 5 :<br>
     </div>
     <br>
     <tt><b>gap&gt; Combinations([1..5],3); <br>
     [ [ 1, 2, 3 ], [ 1, 2, 4 ], [ 1, 2, 5 ], [ 1, 3, 4 ], [ 1, 3, 5 ], <br>
       [ 1, 4, 5 ], [ 2, 3, 4 ], [ 2, 3, 5 ], [ 2, 4, 5 ], [ 3, 4, 5 ] ]<br>
     gap&gt; </b></tt><br>
     <br>
     Если второй параметр не указывать, то возвращается список всех подмножеств 
  заданного множества:<br>
     <br>
     <b><tt>gap&gt; Combinations([1..5]);  <br>
     [ [  ], [ 1 ], [ 1, 2 ], [ 1, 2, 3 ], [ 1, 2, 3, 4 ], [ 1, 2, 3, 4,
5  ],  <br>
       [ 1, 2, 3, 5 ], [ 1, 2, 4 ], [ 1, 2, 4, 5 ], [ 1, 2, 5 ], [ 1, 3 ],
 <br>
       [ 1, 3, 4 ], [ 1, 3, 4, 5 ], [ 1, 3, 5 ], [ 1, 4 ], [ 1, 4, 5 ], [ 
1,  5 ], <br>
       [ 2 ], [ 2, 3 ], [ 2, 3, 4 ], [ 2, 3, 4, 5 ], [ 2, 3, 5 ], [ 2, 4
],  <br>
       [ 2, 4, 5 ], [ 2, 5 ], [ 3 ], [ 3, 4 ], [ 3, 4, 5 ], [ 3, 5 ], [ 4 
],  <br>
       [ 4, 5 ], [ 5 ] ]<br>
     </tt></b><br>
     Количество сочетаний можно также получить и с помощью функции NrCombinations:<br>
     <br>
     <tt><b>gap&gt; Binomial(52,5)=NrCombinations([1..52],5);<br>
     true<br>
     gap&gt; NrCombinations([1..52])=2^52;<br>
     true</b></tt><br>
     <br>
     Однако, <b>NrCombinations </b>является обобщением функции <b><code>Binomial</code></b> 
  на случай множеств, содержащих повторяющиеся элементы, которые различаются 
  как элементы этих множеств. Например, определим, сколько различных наборов
  букв можно выбрать из букв <b>a</b>, <b>b</b>, <b>b</b> и <b>c</b>, и,
в  частности, сколько различных пар букв можно выбрать из них:<br>
     <br>
     <tt><b>gap&gt; NrCombinations( ["a","b","b","c"] ); <br>
     12<br>
     gap&gt; NrCombinations( ["a","b","b","c"],2 );<br>
     4</b></tt><br>
     <br>
     В явном виде эти наборы можно получить с помощью функции <tt><b>Combinations</b></tt>:<br>
    <br>
    <tt><b>gap&gt; Combinations( ["a","b","b","c"] );    <br>
    [ [  ], [ "a" ], [ "a", "b" ], [ "a", "b", "b" ], [ "a", "b", "b", "c"
 ],  <br>
      [ "a", "b", "c" ], [ "a", "c" ], [ "b" ], [ "b", "b" ], [ "b", "b", 
"c"  ], <br>
      [ "b", "c" ], [ "c" ] ]<br>
    gap&gt; Combinations( ["a","b","b","c"],2 );  <br>
    [ [ "a", "b" ], [ "a", "c" ], [ "b", "b" ], [ "b", "c" ] ]<br>
    gap&gt;</b></tt>      
<p>В отличие от функции <tt><b>Combinations</b></tt>, вычисляющей неупорядоченные
  наборы без повторений, функция <b><code>Arrangements</code>  </b> вычисляет
  <i><b>размещения</b></i>, т.е. всевозможные упорядоченные наборы из <i>k</i>
  элементов исходного множества без повторений. Если аргумент <i>k</i> не
задан,  то возвращаются все всевозможные наборы для каждого допустимого значения
 k. Соответственно, количество наборов с указанными свойствами возвращает
функция <b><code>NrArrangements</code></b>. Например, определим, сколько
различных слов можно составить из букв <b>a</b>, <b>b</b>, <b>b</b> и <b>c</b>,
и, в частности, сколько различных двухбуквенных слов можно составить из них,
  а затем выпишем все эти слова:<br>
    </p>
       
<p> <tt><b>gap&gt; NrArrangements( ["a","b","b","c"] );<br>
    35<br>
    gap&gt; NrArrangements( ["a","b","b","c"],2 );<br>
    7<br>
    gap&gt; List( Arrangements( ["a","b","b","c"] ), Concatenation );<br>
    [ [  ], "a", "ab", "abb", "abbc", "abc", "abcb", "ac", "acb", "acbb", 
"b",  <br>
      "ba", "bab", "babc", "bac", "bacb", "bb", "bba", "bbac", "bbc", "bbca",
  <br>
      "bc", "bca", "bcab", "bcb", "bcba", "c", "ca", "cab", "cabb", "cb", 
"cba",  <br>
      "cbab", "cbb", "cbba" ]<br>
    gap&gt; List( Arrangements( ["a","b","b","c"],2 ), Concatenation );<br>
    [ "ab", "ac", "ba", "bb", "bc", "ca", "cb" ]</b></tt></p>
       
<p>Далее, функция <b><code>UnorderedTuples(set, k)</code></b> вычисляет 
  <b><i>сочетания с повторениями</i></b>, т.е. всевозможные неупорядоченные
  наборы из <i>k</i> элементов исходного множества с повторениями. Функция
 <b><code>Tuples</code></b><b><code>(set, k)</code></b>  вычисляет <i><b>размещения
 с повторениями</b></i>, т.е. всевозможные упорядоченные наборы из <i>k</i>
 элементов исходного множества с повторениями (фактически она возвращает
список  элементов декартова произведения множества на себя <i>k</i> раз.).
Соответственно,  количество наборов с указанными свойствами возвращают функции
<b><code></code></b><b><code>NrUnorderedTuples</code></b>   и <b><code>NrTuples</code></b>.<br>
    </p>
       
<p><tt><b>gap&gt; UnorderedTuples([1..3],2);<br>
    [ [ 1, 1 ], [ 1, 2 ], [ 1, 3 ], [ 2, 2 ], [ 2, 3 ], [ 3, 3 ] ]<br>
    gap&gt; Tuples([1..3],2);         <br>
    [ [ 1, 1 ], [ 1, 2 ], [ 1, 3 ], [ 2, 1 ], [ 2, 2 ], [ 2, 3 ], [ 3, 1
],  <br>
      [ 3, 2 ], [ 3, 3 ] ]<br>
    gap&gt; NrUnorderedTuples([1..52],5); <br>
    3819816<br>
    gap&gt; NrTuples([-5..5],5);  <br>
    161051</b></tt><br>
    </p>
       
<p><b><code>PartitionsSet( </code><var>set</var><code> [, </code><var>k</var></b><code><b>]
  )</b> </code>возвращает множество всевозможных неупорядоченных разбиений
 множества <var>set</var>    в объединение <var>k</var> попарно непересекающихся
 непустых множеств. Если <var>k</var> не задано, то возвращаются всевозможные
 разбиения для всех допустимых значений <var>k</var>. Количество таких разбиений
 определяется с помощью функции <b><code>NrPartitionsSet( </code><var>set</var><code>
 [, </code><var>k</var><code>]    )</code><code></code></b>.      </p>
       
<pre><b>gap&gt; PartitionsSet( [1,2,3] );<br>[ [ [ 1 ], [ 2 ], [ 3 ] ], [ [ 1 ], [ 2, 3 ] ], [ [ 1, 2 ], [ 3 ] ], <br>  [ [ 1, 2, 3 ] ], [ [ 1, 3 ], [ 2 ] ] ]<br>gap&gt; PartitionsSet( [1,2,3,4], 2 );<br>[ [ [ 1 ], [ 2, 3, 4 ] ], [ [ 1, 2 ], [ 3, 4 ] ], [ [ 1, 2, 3 ], [ 4 ] ], <br>  [ [ 1, 2, 4 ], [ 3 ] ], [ [ 1, 3 ], [ 2, 4 ] ], [ [ 1, 3, 4 ], [ 2 ] ], <br>  [ [ 1, 4 ], [ 2, 3 ] ] ]<br>gap&gt; NrPartitionsSet( [1..6] );<br>203<br>gap&gt; NrPartitionsSet( [1..10], 3 );<br>9330</b><br></pre>
                                 
<p><b><code>Partitions( </code><var>n</var><code> [, </code><var>k</var></b><code><b>]
     )</b> </code>возвращает множество всех (неупорядоченных) разбиений натурального
 числа <var>n</var>, т.е. его <var></var>представлений <var></var>в виде
(неупорядоченной)  суммы <var>k</var> слагаемых. Если число <var>k</var>
не задано, то возвращается  множество всевозможных таких разбиений для всех
допустимых значений <var>k</var>.  Разбиение числа <i>n</i> в виде неупорядоченной
суммы <i>n</i>     = <i>p</i><sub>1</sub>+<i>p</i><sub>2</sub>  +<font
 face="symbol">&#8230;</font>+       <i>p</i><sub><i>k</i></sub> натуральных  чисел
описывается списком <i>p</i> = [<i>p</i><sub>1</sub>,<i>p</i><sub>2</sub>,<font
 face="symbol">&#8230;</font>,<i>p</i><sub><i>k</i></sub>], элементы которого перечислены
 в невозрастающем порядке. Учтите, что уже <var></var><b><code>Partitions(40)
 </code></b>возвращает 37338 таких разбиений, а для последующих чисел количество
 их разбиений будет еще больше. Его можно определить с помощью функции  <b><code>NrPartitions(
 </code><var>n</var><code> [, </code><var>k</var><code>]     )</code></b>,
 не вычисляя при этом сами разбиения.<br>
  </p>
   
<pre><b>gap&gt; Partitions( 7 );<br>[ [ 1, 1, 1, 1, 1, 1, 1 ], [ 2, 1, 1, 1, 1, 1 ], [ 2, 2, 1, 1, 1 ], <br>  [ 2, 2, 2, 1 ], [ 3, 1, 1, 1, 1 ], [ 3, 2, 1, 1 ], [ 3, 2, 2 ], <br>  [ 3, 3, 1 ], [ 4, 1, 1, 1 ], [ 4, 2, 1 ], [ 4, 3 ], [ 5, 1, 1 ], [ 5, 2 ], <br>  [ 6, 1 ], [ 7 ] ]<br>gap&gt; Partitions( 8, 3 );<br>[ [ 3, 3, 2 ], [ 4, 2, 2 ], [ 4, 3, 1 ], [ 5, 2, 1 ], [ 6, 1, 1 ] ]<br>gap&gt; NrPartitions( 7 );<br>15<br>gap&gt; NrPartitions( 100 );<br>190569292</b></pre>
   
<p>Аналогами этих функций, имеющими дело с упорядоченными разбиениями натурального
 числа <i>n</i>, являются функции <b><code>OrderedPartitions( </code><var>n</var><code>
 [, </code><var>k</var></b><code><b>]     )</b> </code>и  <b><code>NrOrderedPartitions(
 </code><var>n</var><code> [, </code><var>k</var><code>]     )</code></b>.
 Учтите, что уже для <i>n</i>=15  результат функции<code> <b>OrderedPartitions(15</b></code><b><code></code><var></var></b><code><b>)</b>
 </code>будет достаточно объемным.</p>
   
<pre><b>gap&gt; OrderedPartitions( 5 );<br>[ [ 1, 1, 1, 1, 1 ], [ 1, 1, 1, 2 ], [ 1, 1, 2, 1 ], [ 1, 1, 3 ], <br>  [ 1, 2, 1, 1 ], [ 1, 2, 2 ], [ 1, 3, 1 ], [ 1, 4 ], [ 2, 1, 1, 1 ], <br>  [ 2, 1, 2 ], [ 2, 2, 1 ], [ 2, 3 ], [ 3, 1, 1 ], [ 3, 2 ], [ 4, 1 ], [ 5 ] ]<br>gap&gt; OrderedPartitions( 6, 3 );<br>[ [ 1, 1, 4 ], [ 1, 2, 3 ], [ 1, 3, 2 ], [ 1, 4, 1 ], [ 2, 1, 3 ], <br>  [ 2, 2, 2 ], [ 2, 3, 1 ], [ 3, 1, 2 ], [ 3, 2, 1 ], [ 4, 1, 1 ] ]<br>gap&gt; NrOrderedPartitions(20);<br>524288</b></pre>
   
<p>Также имеются функции, позволяющие рассматривать только те разбиения,
которые удовлетворяют некоторым дополнительным условиям. Функция <b><code>PartitionsGreatestLE(
 </code><var>n</var><code>, </code><var>m</var></b><code><b>     )</b> </code>возвращает
 множество всех (неупорядоченных) разбиений натурального числа <var>n</var>,
 каждое слагаемое которых меньше или равняется <var>m</var>. Функция <b><code>PartitionsGreatestEQ(
 </code><var>n</var><code>, </code><var>m</var><code>     )</code></b><code></code><var></var><code></code><var></var><code>
 </code>возвращает множество всех (неупорядоченных) разбиений натурального
 числа <var>n</var>, в которых максимальное слагаемое равняется <var>m</var>.
 <br>
  </p>
   
<p>Функция <b><code>RestrictedPartitions( </code><var>n</var><code>, </code><var>set</var><code>
     [, </code><var>k</var><code>] )</code></b>  возвращает множество всех
 (неупорядоченных) разбиений натурального числа <var>n</var>  (на <var>k</var>
 слагаемых, если задан аргумент <var>k, </var>или всевозможных, если он не
 задан), в которых слагаемые  принадлежат множеству <var>set</var>. Число
таких разбиений можно получить с помощью функции <b><code>NrRestrictedPartitions(
 </code><var>n</var><code>, </code><var>set</var><code>     [, </code><var>k</var><code>]
 )</code></b>.<br>
  </p>
   
<pre><b>gap&gt; RestrictedPartitions( 8, [1,3,5,7] );<br>[ [ 1, 1, 1, 1, 1, 1, 1, 1 ], [ 3, 1, 1, 1, 1, 1 ], [ 3, 3, 1, 1 ], <br>  [ 5, 1, 1, 1 ], [ 5, 3 ], [ 7, 1 ] ]<br>gap&gt; NrRestrictedPartitions(100,[1,2,5,10,25,50]);<br>3953<br></b></pre>
   
<p>Последний пример показывает, что существует 3953 способа выдать 1 гривню
 монетами в 1, 2, 5, 10, 25 и 50 копеек.<br>
  </p>
   
<p>Функция <b><code>Fibonacci( </code><var>n</var><code> )</code></b> возвращает
 <var>n</var>-й элемент последовательности Фибоначчи, которая определена
следующим  образом: <strong></strong><i>F</i><sub>1</sub>=<i>F</i><sub>2</sub>=1
и <i>F</i><sub><i>n</i>+2</sub>  = <i>F</i><sub><i>n</i>+1</sub>   +    <i>F</i><sub><i>n</i></sub>.
Получим  список первых пятидесяти ее элементов и продемонстрируем одно интересное
свойство данной последовательности:   </p>
   
<pre><b>gap&gt; fib:=List([1..50],Fibonacci);<br>[ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, <br>  4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, <br>  514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, <br>  24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, <br>  701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, <br>  12586269025 ]<br>gap&gt; Gcd( fib[50], fib[25] ) = fib[ Gcd(50,25) ];<br>true</b></pre>
                     
<hr width="100%" size="2">                                     </div>
           </div>
            <i><font face="Arial,Helvetica"><font size="-1"><a
 href="Examples.htm">Вернуться к списку примеров</a></font></font></i>   
</body>
</html>
